2023/12/01 15:28:14 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 (main, Sep 11 2023, 13:44:35) [GCC 11.2.0]
    CUDA available: True
    numpy_random_seed: 1096826196
    GPU 0: NVIDIA GeForce RTX 3080
    CUDA_HOME: /usr/local/cuda-11.8
    NVCC: Cuda compilation tools, release 11.8, V11.8.89
    GCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
    PyTorch: 2.0.0+cu118
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2022.2-Product Build 20220804 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.7.3 (Git Hash 6dbeffbae1f23cbbeae17adb7b5b13f1f37c080e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 8.7
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=ON, TORCH_VERSION=2.0.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.15.1+cu118
    OpenCV: 4.8.1
    MMEngine: 0.10.1

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1096826196
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2023/12/01 15:28:14 - mmengine - INFO - Config:
ann_file_train = './cvs/action_small_train_video.txt'
ann_file_val = './cvs/action_small_val_video.txt'
auto_scale_lr = dict(base_batch_size=128, enable=False)
data_root = './cvs/train/'
data_root_val = './cvs/val/'
dataset_type = 'VideoDataset'
default_hooks = dict(
    checkpoint=dict(
        interval=3, max_keep_ckpts=3, save_best='auto', type='CheckpointHook'),
    logger=dict(ignore_last=False, interval=20, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    runtime_info=dict(type='RuntimeInfoHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    sync_buffers=dict(type='SyncBuffersHook'),
    timer=dict(type='IterTimerHook'))
default_scope = 'mmaction'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
file_client_args = dict(io_backend='disk')
load_from = '/home/hsm/Python/MMACTION2/checkpoints/tsm_imagenet-pretrained-r50_8xb16-1x1x8-50e_kinetics400-rgb_20220831-64d69186.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=20)
model = dict(
    backbone=dict(
        depth=50,
        norm_eval=False,
        pretrained='torchvision://resnet50',
        shift_div=8,
        type='ResNetTSM'),
    cls_head=dict(
        average_clips='prob',
        consensus=dict(dim=1, type='AvgConsensus'),
        dropout_ratio=0.5,
        in_channels=2048,
        init_std=0.001,
        is_shift=True,
        num_classes=2,
        spatial_type='avg',
        type='TSMHead'),
    data_preprocessor=dict(
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='ActionDataPreprocessor'),
    test_cfg=None,
    train_cfg=None,
    type='Recognizer2D')
optim_wrapper = dict(
    clip_grad=dict(max_norm=20, norm_type=2),
    constructor='TSMOptimWrapperConstructor',
    optimizer=dict(
        lr=0.00015625, momentum=0.9, type='SGD', weight_decay=0.0001),
    paramwise_cfg=dict(fc_lr5=True))
param_scheduler = [
    dict(begin=0, by_epoch=True, end=10, start_factor=0.1, type='LinearLR'),
    dict(
        begin=0,
        by_epoch=True,
        end=100,
        gamma=0.1,
        milestones=[
            50,
            90,
        ],
        type='MultiStepLR'),
]
preprocess_cfg = dict(
    mean=[
        123.675,
        116.28,
        103.53,
    ], std=[
        58.395,
        57.12,
        57.375,
    ])
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='./cvs/action_small_val_video.txt',
        data_prefix=dict(video='./cvs/val/'),
        pipeline=[
            dict(io_backend='disk', type='DecordInit'),
            dict(
                clip_len=1,
                frame_interval=1,
                num_clips=8,
                test_mode=True,
                type='SampleFrames'),
            dict(type='DecordDecode'),
            dict(scale=(
                -1,
                256,
            ), type='Resize'),
            dict(crop_size=224, type='TenCrop'),
            dict(input_format='NCHW', type='FormatShape'),
            dict(type='PackActionInputs'),
        ],
        test_mode=True,
        type='VideoDataset'),
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(type='AccMetric')
test_pipeline = [
    dict(io_backend='disk', type='DecordInit'),
    dict(
        clip_len=1,
        frame_interval=1,
        num_clips=8,
        test_mode=True,
        type='SampleFrames'),
    dict(type='DecordDecode'),
    dict(scale=(
        -1,
        256,
    ), type='Resize'),
    dict(crop_size=224, type='TenCrop'),
    dict(input_format='NCHW', type='FormatShape'),
    dict(type='PackActionInputs'),
]
train_cfg = dict(
    max_epochs=10, type='EpochBasedTrainLoop', val_begin=1, val_interval=1)
train_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='./cvs/action_small_train_video.txt',
        data_prefix=dict(video='./cvs/train/'),
        pipeline=[
            dict(io_backend='disk', type='DecordInit'),
            dict(
                clip_len=1, frame_interval=1, num_clips=8,
                type='SampleFrames'),
            dict(type='DecordDecode'),
            dict(scale=(
                -1,
                256,
            ), type='Resize'),
            dict(
                input_size=224,
                max_wh_scale_gap=1,
                num_fixed_crops=13,
                random_crop=False,
                scales=(
                    1,
                    0.875,
                    0.75,
                    0.66,
                ),
                type='MultiScaleCrop'),
            dict(keep_ratio=False, scale=(
                224,
                224,
            ), type='Resize'),
            dict(flip_ratio=0.5, type='Flip'),
            dict(input_format='NCHW', type='FormatShape'),
            dict(type='PackActionInputs'),
        ],
        type='VideoDataset'),
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(io_backend='disk', type='DecordInit'),
    dict(clip_len=1, frame_interval=1, num_clips=8, type='SampleFrames'),
    dict(type='DecordDecode'),
    dict(scale=(
        -1,
        256,
    ), type='Resize'),
    dict(
        input_size=224,
        max_wh_scale_gap=1,
        num_fixed_crops=13,
        random_crop=False,
        scales=(
            1,
            0.875,
            0.75,
            0.66,
        ),
        type='MultiScaleCrop'),
    dict(keep_ratio=False, scale=(
        224,
        224,
    ), type='Resize'),
    dict(flip_ratio=0.5, type='Flip'),
    dict(input_format='NCHW', type='FormatShape'),
    dict(type='PackActionInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='./cvs/action_small_val_video.txt',
        data_prefix=dict(video='./cvs/val/'),
        pipeline=[
            dict(io_backend='disk', type='DecordInit'),
            dict(
                clip_len=1,
                frame_interval=1,
                num_clips=8,
                test_mode=True,
                type='SampleFrames'),
            dict(type='DecordDecode'),
            dict(scale=(
                -1,
                256,
            ), type='Resize'),
            dict(crop_size=224, type='CenterCrop'),
            dict(input_format='NCHW', type='FormatShape'),
            dict(type='PackActionInputs'),
        ],
        test_mode=True,
        type='VideoDataset'),
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(type='AccMetric')
val_pipeline = [
    dict(io_backend='disk', type='DecordInit'),
    dict(
        clip_len=1,
        frame_interval=1,
        num_clips=8,
        test_mode=True,
        type='SampleFrames'),
    dict(type='DecordDecode'),
    dict(scale=(
        -1,
        256,
    ), type='Resize'),
    dict(crop_size=224, type='CenterCrop'),
    dict(input_format='NCHW', type='FormatShape'),
    dict(type='PackActionInputs'),
]
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    type='ActionVisualizer', vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = 'tutorial_exps'

2023/12/01 15:28:16 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2023/12/01 15:28:16 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SyncBuffersHook                    
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SyncBuffersHook                    
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2023/12/01 15:28:18 - mmengine - INFO - _IncompatibleKeys(missing_keys=[], unexpected_keys=['fc.weight', 'fc.bias'])
Name of parameter - Initialization information

backbone.conv1.conv.weight - torch.Size([64, 3, 7, 7]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.conv1.bn.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.conv1.bn.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer1.0.conv1.conv.net.weight - torch.Size([64, 64, 1, 1]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer1.0.conv1.bn.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer1.0.conv1.bn.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer1.0.conv2.conv.weight - torch.Size([64, 64, 3, 3]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer1.0.conv2.bn.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer1.0.conv2.bn.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer1.0.conv3.conv.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer1.0.conv3.bn.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer1.0.conv3.bn.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer1.0.downsample.conv.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer1.0.downsample.bn.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer1.0.downsample.bn.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer1.1.conv1.conv.net.weight - torch.Size([64, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer1.1.conv1.bn.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer1.1.conv1.bn.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer1.1.conv2.conv.weight - torch.Size([64, 64, 3, 3]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer1.1.conv2.bn.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer1.1.conv2.bn.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer1.1.conv3.conv.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer1.1.conv3.bn.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer1.1.conv3.bn.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer1.2.conv1.conv.net.weight - torch.Size([64, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer1.2.conv1.bn.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer1.2.conv1.bn.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer1.2.conv2.conv.weight - torch.Size([64, 64, 3, 3]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer1.2.conv2.bn.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer1.2.conv2.bn.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer1.2.conv3.conv.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer1.2.conv3.bn.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer1.2.conv3.bn.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer2.0.conv1.conv.net.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer2.0.conv1.bn.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer2.0.conv1.bn.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer2.0.conv2.conv.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer2.0.conv2.bn.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer2.0.conv2.bn.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer2.0.conv3.conv.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer2.0.conv3.bn.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer2.0.conv3.bn.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer2.0.downsample.conv.weight - torch.Size([512, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer2.0.downsample.bn.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer2.0.downsample.bn.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer2.1.conv1.conv.net.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer2.1.conv1.bn.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer2.1.conv1.bn.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer2.1.conv2.conv.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer2.1.conv2.bn.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer2.1.conv2.bn.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer2.1.conv3.conv.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer2.1.conv3.bn.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer2.1.conv3.bn.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer2.2.conv1.conv.net.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer2.2.conv1.bn.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer2.2.conv1.bn.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer2.2.conv2.conv.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer2.2.conv2.bn.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer2.2.conv2.bn.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer2.2.conv3.conv.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer2.2.conv3.bn.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer2.2.conv3.bn.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer2.3.conv1.conv.net.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer2.3.conv1.bn.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer2.3.conv1.bn.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer2.3.conv2.conv.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer2.3.conv2.bn.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer2.3.conv2.bn.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer2.3.conv3.conv.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer2.3.conv3.bn.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer2.3.conv3.bn.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer3.0.conv1.conv.net.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer3.0.conv1.bn.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer3.0.conv1.bn.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer3.0.conv2.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer3.0.conv2.bn.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer3.0.conv2.bn.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer3.0.conv3.conv.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer3.0.conv3.bn.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer3.0.conv3.bn.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer3.0.downsample.conv.weight - torch.Size([1024, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer3.0.downsample.bn.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer3.0.downsample.bn.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer3.1.conv1.conv.net.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer3.1.conv1.bn.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer3.1.conv1.bn.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer3.1.conv2.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer3.1.conv2.bn.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer3.1.conv2.bn.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer3.1.conv3.conv.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer3.1.conv3.bn.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer3.1.conv3.bn.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer3.2.conv1.conv.net.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer3.2.conv1.bn.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer3.2.conv1.bn.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer3.2.conv2.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer3.2.conv2.bn.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer3.2.conv2.bn.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer3.2.conv3.conv.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer3.2.conv3.bn.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer3.2.conv3.bn.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer3.3.conv1.conv.net.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer3.3.conv1.bn.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer3.3.conv1.bn.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer3.3.conv2.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer3.3.conv2.bn.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer3.3.conv2.bn.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer3.3.conv3.conv.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer3.3.conv3.bn.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer3.3.conv3.bn.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer3.4.conv1.conv.net.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer3.4.conv1.bn.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer3.4.conv1.bn.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer3.4.conv2.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer3.4.conv2.bn.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer3.4.conv2.bn.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer3.4.conv3.conv.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer3.4.conv3.bn.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer3.4.conv3.bn.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer3.5.conv1.conv.net.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer3.5.conv1.bn.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer3.5.conv1.bn.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer3.5.conv2.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer3.5.conv2.bn.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer3.5.conv2.bn.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer3.5.conv3.conv.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer3.5.conv3.bn.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer3.5.conv3.bn.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer4.0.conv1.conv.net.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer4.0.conv1.bn.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer4.0.conv1.bn.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer4.0.conv2.conv.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer4.0.conv2.bn.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer4.0.conv2.bn.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer4.0.conv3.conv.weight - torch.Size([2048, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer4.0.conv3.bn.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer4.0.conv3.bn.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer4.0.downsample.conv.weight - torch.Size([2048, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer4.0.downsample.bn.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer4.0.downsample.bn.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer4.1.conv1.conv.net.weight - torch.Size([512, 2048, 1, 1]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer4.1.conv1.bn.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer4.1.conv1.bn.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer4.1.conv2.conv.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer4.1.conv2.bn.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer4.1.conv2.bn.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer4.1.conv3.conv.weight - torch.Size([2048, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer4.1.conv3.bn.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer4.1.conv3.bn.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer4.2.conv1.conv.net.weight - torch.Size([512, 2048, 1, 1]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer4.2.conv1.bn.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer4.2.conv1.bn.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer4.2.conv2.conv.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer4.2.conv2.bn.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer4.2.conv2.bn.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer4.2.conv3.conv.weight - torch.Size([2048, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer4.2.conv3.bn.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNetTSM  

backbone.layer4.2.conv3.bn.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNetTSM  

cls_head.fc_cls.weight - torch.Size([2, 2048]): 
Initialized by user-defined `init_weights` in TSMHead  

cls_head.fc_cls.bias - torch.Size([2]): 
Initialized by user-defined `init_weights` in TSMHead  
2023/12/01 15:28:19 - mmengine - INFO - Load checkpoint from /home/hsm/Python/MMACTION2/checkpoints/tsm_imagenet-pretrained-r50_8xb16-1x1x8-50e_kinetics400-rgb_20220831-64d69186.pth
2023/12/01 15:28:19 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2023/12/01 15:28:19 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2023/12/01 15:28:19 - mmengine - INFO - Checkpoints will be saved to /home/hsm/Python/MMACTION2/tutorial_exps.
2023/12/01 15:28:25 - mmengine - INFO - Epoch(train)  [1][ 20/619]  base_lr: 1.5625e-05 lr: 1.5625e-05  eta: 0:31:32  time: 0.3067  data_time: 0.1740  memory: 1179  grad_norm: 8.3612  loss: 0.7002  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.7002
2023/12/01 15:28:29 - mmengine - INFO - Epoch(train)  [1][ 40/619]  base_lr: 1.5625e-05 lr: 1.5625e-05  eta: 0:27:38  time: 0.2328  data_time: 0.1782  memory: 1179  grad_norm: 7.8353  loss: 0.6676  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.6676
2023/12/01 15:28:34 - mmengine - INFO - Epoch(train)  [1][ 60/619]  base_lr: 1.5625e-05 lr: 1.5625e-05  eta: 0:25:40  time: 0.2143  data_time: 0.1613  memory: 1179  grad_norm: 8.3184  loss: 0.7456  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.7456
2023/12/01 15:28:38 - mmengine - INFO - Epoch(train)  [1][ 80/619]  base_lr: 1.5625e-05 lr: 1.5625e-05  eta: 0:24:14  time: 0.1987  data_time: 0.1463  memory: 1179  grad_norm: 8.1049  loss: 0.6815  top1_acc: 0.0000  top5_acc: 1.0000  loss_cls: 0.6815
